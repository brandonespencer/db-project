{"ast":null,"code":"import validator from 'validator';\n\nclass checker {\n  alphabetic(word) {\n    if (word && validator.isAlpha(word)) return true;\n    return false;\n  }\n\n  email(email) {\n    if (email && validator.isEmail(email)) return true;\n    return false;\n  }\n\n  password(password) {\n    if (password && validator.isStrongPassword(password)) return true;\n    return false;\n  }\n\n  siteURL(url) {\n    if (url && validator.isURL(url)) return true;\n    return false;\n  }\n\n  checkDate() {\n    let dateToBeCheck = arguments.length <= 0 ? undefined : arguments[0];\n    let paramForDate = arguments.length <= 1 ? undefined : arguments[1];\n    let relDate = arguments.length <= 2 ? undefined : arguments[2];\n    if (!dateToBeCheck || !validator.isDate(dateToBeCheck)) return false;\n\n    if (paramForDate) {\n      switch (paramForDate) {\n        case 'smaller':\n          if (new Date(dateToBeCheck) < new Date(relDate)) return true;else return false;\n\n        case 'greater':\n          if (new Date(dateToBeCheck) > new Date(relDate)) return true;else return false;\n\n        default:\n          return false;\n      }\n    }\n  }\n\n}\n\nexport default new checker();","map":{"version":3,"names":["validator","checker","alphabetic","word","isAlpha","email","isEmail","password","isStrongPassword","siteURL","url","isURL","checkDate","dateToBeCheck","paramForDate","relDate","isDate","Date"],"sources":["/Users/saraneuenschwander/Desktop/challenges/Developers-Branch/frontend/src/components/utils/checkFields.js"],"sourcesContent":["import validator from 'validator';\r\nclass checker {\r\n\talphabetic(word) {\r\n\t\tif (word && validator.isAlpha(word)) return true;\r\n\t\treturn false;\r\n\t}\r\n\temail(email) {\r\n\t\tif (email && validator.isEmail(email)) return true;\r\n\t\treturn false;\r\n\t}\r\n\tpassword(password) {\r\n\t\tif (password && validator.isStrongPassword(password)) return true;\r\n\t\treturn false;\r\n\t}\r\n\tsiteURL(url) {\r\n\t\tif (url && validator.isURL(url)) return true;\r\n\t\treturn false;\r\n\t}\r\n\tcheckDate(...args) {\r\n\t\tlet dateToBeCheck = args[0];\r\n\t\tlet paramForDate = args[1];\r\n\t\tlet relDate = args[2];\r\n\t\tif (!dateToBeCheck || !validator.isDate(dateToBeCheck)) return false;\r\n\r\n\t\tif (paramForDate) {\r\n\t\t\tswitch (paramForDate) {\r\n\t\t\t\tcase 'smaller':\r\n\t\t\t\t\tif (new Date(dateToBeCheck) < new Date(relDate)) return true;\r\n\t\t\t\t\telse return false;\r\n\t\t\t\tcase 'greater':\r\n\t\t\t\t\tif (new Date(dateToBeCheck) > new Date(relDate)) return true;\r\n\t\t\t\t\telse return false;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default new checker();\r\n"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,WAAtB;;AACA,MAAMC,OAAN,CAAc;EACbC,UAAU,CAACC,IAAD,EAAO;IAChB,IAAIA,IAAI,IAAIH,SAAS,CAACI,OAAV,CAAkBD,IAAlB,CAAZ,EAAqC,OAAO,IAAP;IACrC,OAAO,KAAP;EACA;;EACDE,KAAK,CAACA,KAAD,EAAQ;IACZ,IAAIA,KAAK,IAAIL,SAAS,CAACM,OAAV,CAAkBD,KAAlB,CAAb,EAAuC,OAAO,IAAP;IACvC,OAAO,KAAP;EACA;;EACDE,QAAQ,CAACA,QAAD,EAAW;IAClB,IAAIA,QAAQ,IAAIP,SAAS,CAACQ,gBAAV,CAA2BD,QAA3B,CAAhB,EAAsD,OAAO,IAAP;IACtD,OAAO,KAAP;EACA;;EACDE,OAAO,CAACC,GAAD,EAAM;IACZ,IAAIA,GAAG,IAAIV,SAAS,CAACW,KAAV,CAAgBD,GAAhB,CAAX,EAAiC,OAAO,IAAP;IACjC,OAAO,KAAP;EACA;;EACDE,SAAS,GAAU;IAClB,IAAIC,aAAa,mDAAjB;IACA,IAAIC,YAAY,mDAAhB;IACA,IAAIC,OAAO,mDAAX;IACA,IAAI,CAACF,aAAD,IAAkB,CAACb,SAAS,CAACgB,MAAV,CAAiBH,aAAjB,CAAvB,EAAwD,OAAO,KAAP;;IAExD,IAAIC,YAAJ,EAAkB;MACjB,QAAQA,YAAR;QACC,KAAK,SAAL;UACC,IAAI,IAAIG,IAAJ,CAASJ,aAAT,IAA0B,IAAII,IAAJ,CAASF,OAAT,CAA9B,EAAiD,OAAO,IAAP,CAAjD,KACK,OAAO,KAAP;;QACN,KAAK,SAAL;UACC,IAAI,IAAIE,IAAJ,CAASJ,aAAT,IAA0B,IAAII,IAAJ,CAASF,OAAT,CAA9B,EAAiD,OAAO,IAAP,CAAjD,KACK,OAAO,KAAP;;QACN;UACC,OAAO,KAAP;MARF;IAUA;EACD;;AAnCY;;AAsCd,eAAe,IAAId,OAAJ,EAAf"},"metadata":{},"sourceType":"module"}